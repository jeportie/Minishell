!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BLUE	Makefile	/^BLUE    = \\033[34m$/;"	m
BOLD	Makefile	/^BOLD    = \\033[1m$/;"	m
BUFFER_SIZE	lib/libft/include/libft.h	27;"	d
CC	Makefile	/^CC = 		cc$/;"	m
CC	Makefile	/^default: CC = cc$/;"	m
CC	Makefile	/^san: CC = clang$/;"	m
CC	Makefile	/^val: CC = cc$/;"	m
CC	lib/libft/Makefile	/^CC = gcc$/;"	m
CFLAGS	Makefile	/^CFLAGS = 	-Wall -Wextra -Werror$/;"	m
CFLAGS	lib/libft/Makefile	/^CFLAGS = -Wall -Wextra -Werror$/;"	m
DEPFLAGS	Makefile	/^DEPFLAGS =  -MMD -MP$/;"	m
DEPS	Makefile	/^DEPS = 		$(OBJ:.o=.d)$/;"	m
DirectoryOfThisScript	ycm_extra_conf.py	/^def DirectoryOfThisScript():$/;"	f
ERNOFORMAT	lib/libft/include/libft.h	/^	ERNOFORMAT,$/;"	e	enum:e_error
ERNOMEM	lib/libft/include/libft.h	/^	ERNOMEM,$/;"	e	enum:e_error
ERNOWRITE	lib/libft/include/libft.h	/^	ERNOWRITE,$/;"	e	enum:e_error
ERROR	lib/libft/include/libft.h	30;"	d
FlagsForFile	ycm_extra_conf.py	/^def FlagsForFile(filename):$/;"	f
GREEN	Makefile	/^GREEN   = \\033[32m$/;"	m
HELG	Makefile	/^HELG =      valgrind --tool=helgrind --history-level=full \\$/;"	m
INCLUDES	Makefile	/^INCLUDES = -I.\/include #-I.\/lib\/libft\/include -I.\/lib\/libgc\/include$/;"	m
LDFLAGS	Makefile	/^LDFLAGS = -lreadline #-L.\/lib\/libft -lft -L.\/lib\/libgc -lgc$/;"	m
LIBFT_H	lib/libft/include/libft.h	14;"	d
MINISHELL_H	include/minishell.h	14;"	d
MakeRelativePathsAbsolute	ycm_extra_conf.py	/^def MakeRelativePathsAbsolute(flags, working_directory):$/;"	f
NAME	Makefile	/^NAME = Minishell$/;"	m
NAME	lib/libft/Makefile	/^NAME = libft.a$/;"	m
NOERR	lib/libft/include/libft.h	/^	NOERR,$/;"	e	enum:e_error
OBJ	Makefile	/^OBJ = 		$(SRC:$(SRC_DIR)\/%.c=$(OBJ_DIR)\/%.o)$/;"	m
OBJ	lib/libft/Makefile	/^OBJ = $(SRC:.c=.o)$/;"	m
OBJ_DIR	Makefile	/^OBJ_DIR = 	obj$/;"	m
RED	Makefile	/^RED     = \\033[31m$/;"	m
RESET	Makefile	/^RESET   = \\033[0m$/;"	m
SANITIZE	Makefile	/^SANITIZE = 	-g3 -fPIC -fsanitize=thread$/;"	m
SCRIPT_URL	Makefile	/^SCRIPT_URL = https:\/\/github.com\/jeromeDev94\/make_interface.git$/;"	m
SRC	Makefile	/^SRC = \\$/;"	m
SRC	lib/libft/Makefile	/^SRC = \\$/;"	m
SRC_DIR	Makefile	/^SRC_DIR = 	src$/;"	m
START_TEST	lib/libft/test_src/bool/test_ft_isalnum.c	/^START_TEST(test_isalnum_alpha_lowercase)$/;"	f
START_TEST	lib/libft/test_src/bool/test_ft_isalnum.c	/^START_TEST(test_isalnum_alpha_uppercase)$/;"	f
START_TEST	lib/libft/test_src/bool/test_ft_isalnum.c	/^START_TEST(test_isalnum_boundary_after_alpha_upper)$/;"	f
START_TEST	lib/libft/test_src/bool/test_ft_isalnum.c	/^START_TEST(test_isalnum_boundary_after_digit)$/;"	f
START_TEST	lib/libft/test_src/bool/test_ft_isalnum.c	/^START_TEST(test_isalnum_boundary_before_alpha_upper)$/;"	f
START_TEST	lib/libft/test_src/bool/test_ft_isalnum.c	/^START_TEST(test_isalnum_boundary_before_digit)$/;"	f
START_TEST	lib/libft/test_src/bool/test_ft_isalnum.c	/^START_TEST(test_isalnum_digit)$/;"	f
START_TEST	lib/libft/test_src/bool/test_ft_isalnum.c	/^START_TEST(test_isalnum_non_alnum)$/;"	f
START_TEST	lib/libft/test_src/bool/test_ft_isalnum.c	/^START_TEST(test_isalnum_null_char)$/;"	f
START_TEST	lib/libft/test_src/bool/test_ft_isalnum.c	/^START_TEST(test_isalnum_space)$/;"	f
START_TEST	lib/libft/test_src/bool/test_ft_isalpha.c	/^START_TEST(test_ft_isalpha_edge_cases)$/;"	f
START_TEST	lib/libft/test_src/bool/test_ft_isalpha.c	/^START_TEST(test_ft_isalpha_lowercase)$/;"	f
START_TEST	lib/libft/test_src/bool/test_ft_isalpha.c	/^START_TEST(test_ft_isalpha_non_alpha)$/;"	f
START_TEST	lib/libft/test_src/bool/test_ft_isalpha.c	/^START_TEST(test_ft_isalpha_uppercase)$/;"	f
START_TEST	lib/libft/test_src/memory/test_ft_memset.c	/^START_TEST(test_entire_buffer)$/;"	f
START_TEST	lib/libft/test_src/memory/test_ft_memset.c	/^START_TEST(test_large_size)$/;"	f
START_TEST	lib/libft/test_src/memory/test_ft_memset.c	/^START_TEST(test_normal_behavior)$/;"	f
START_TEST	lib/libft/test_src/memory/test_ft_memset.c	/^START_TEST(test_single_byte)$/;"	f
START_TEST	lib/libft/test_src/memory/test_ft_memset.c	/^START_TEST(test_zero_length)$/;"	f
START_TEST	test_src/init_shell/test_ms_get_user_input.c	/^START_TEST(test_ms_get_user_input_empty)$/;"	f
START_TEST	test_src/init_shell/test_ms_get_user_input.c	/^START_TEST(test_ms_get_user_input_normal)$/;"	f
START_TEST	test_src/init_shell/test_ms_get_user_input.c	/^START_TEST(test_ms_get_user_input_special_chars)$/;"	f
START_TEST	test_src/init_shell/test_ms_init_shell.c	/^START_TEST(test_ms_init_shell_initialization)$/;"	f
TOTAL_STEPS	Makefile	/^TOTAL_STEPS := $(words $(OBJ))$/;"	m
VALG	Makefile	/^VALG =		valgrind --leak-check=full --show-leak-kinds=all \\$/;"	m
VERBOSE	Makefile	/^VERBOSE ?= @$/;"	m
VERBOSE	Makefile	/^classic: VERBOSE =$/;"	m
VFLAGS	Makefile	/^VFLAGS = 	-g3 -fPIC $/;"	m
YELLOW	Makefile	/^YELLOW  = \\033[33m$/;"	m
buf_fd	lib/libft/include/libft.h	/^	int		buf_fd;$/;"	m	struct:s_buffer
buf_last	lib/libft/include/libft.h	/^	char	buf_last;$/;"	m	struct:s_buffer
buffer	lib/libft/include/libft.h	/^	char	*buffer;$/;"	m	struct:s_buffer
calendar_cache_directory	Makefile	/^	vim -c "let g:calendar_cache_directory=expand('.\/.calendar\/')" \\$/;"	m
compilation_database_folder	ycm_extra_conf.py	/^compilation_database_folder = ''$/;"	v
e_error	lib/libft/include/libft.h	/^typedef enum e_error$/;"	g
error	lib/libft/include/libft.h	/^	int			error;$/;"	m	struct:s_format_spec
error	lib/libft/include/libft.h	/^	int		error;$/;"	m	struct:s_buffer
error_code	include/minishell.h	/^	int		error_code;$/;"	m	struct:s_shell
flag_hash	lib/libft/include/libft.h	/^	int			flag_hash;$/;"	m	struct:s_format_spec
flag_minus	lib/libft/include/libft.h	/^	int			flag_minus;$/;"	m	struct:s_format_spec
flag_plus	lib/libft/include/libft.h	/^	int			flag_plus;$/;"	m	struct:s_format_spec
flag_space	lib/libft/include/libft.h	/^	int			flag_space;$/;"	m	struct:s_format_spec
flag_zero	lib/libft/include/libft.h	/^	int			flag_zero;$/;"	m	struct:s_format_spec
flags	ycm_extra_conf.py	/^flags = [$/;"	v
ft_apply_precision	lib/libft/src/printf/ft_apply_precision.c	/^void	ft_apply_precision(t_format_spec spec, char **formatted_content)$/;"	f
ft_apply_width	lib/libft/src/printf/ft_apply_width.c	/^void	ft_apply_width(t_format_spec spec, t_buffer *buf_info, int content_len)$/;"	f
ft_atoi	lib/libft/src/conversion/ft_atoi.c	/^int	ft_atoi(const char *nptr)$/;"	f
ft_atol	lib/libft/src/conversion/ft_atol.c	/^long	ft_atol(const char *nptr)$/;"	f
ft_buffer_add	lib/libft/src/printf/ft_buffer_add.c	/^void	ft_buffer_add(t_buffer *buf_info, char c)$/;"	f
ft_buffer_flush	lib/libft/src/printf/ft_buffer_flush.c	/^int	ft_buffer_flush(t_buffer *buf_info)$/;"	f
ft_bzero	lib/libft/src/memory/ft_bzero.c	/^void	ft_bzero(void *s, size_t n)$/;"	f
ft_calloc	lib/libft/src/memory/ft_calloc.c	/^void	*ft_calloc(size_t nmemb, size_t size)$/;"	f
ft_check_fd	lib/libft/src/utils/ft_check_fd.c	/^void	ft_check_fd(int fd, const char *error_message)$/;"	f
ft_check_flush	lib/libft/src/printf/ft_printf.c	/^void	ft_check_flush(t_buffer *buf_info)$/;"	f
ft_check_format	lib/libft/src/printf/ft_check_format.c	/^int	ft_check_format(t_format_spec *spec)$/;"	f
ft_check_malloc	lib/libft/src/utils/ft_check_malloc.c	/^void	ft_check_malloc(void *ptr, const char *error_message)$/;"	f
ft_check_pid	lib/libft/src/utils/ft_check_pid.c	/^void	ft_check_pid(int pid)$/;"	f
ft_concat_path	lib/libft/src/utils/ft_find_cmd_path.c	/^static char	*ft_concat_path(char **paths, const char *cmd)$/;"	f	file:
ft_convert_spec	lib/libft/src/printf/ft_printf.c	/^static int	ft_convert_spec(t_format_spec spec, va_list args,$/;"	f	file:
ft_count_words	lib/libft/src/string/ft_split.c	/^size_t	ft_count_words(char *str, char c)$/;"	f
ft_extract	lib/libft/src/string/ft_split.c	/^static char	*ft_extract(const char **s, char c, char **tab, size_t i)$/;"	f	file:
ft_fill_base	lib/libft/src/conversion/ft_ulltoa_base.c	/^static char	*ft_fill_base(unsigned long long nbr, int size, char *base,$/;"	f	file:
ft_fill_base	lib/libft/src/conversion/ft_utoa_base.c	/^static char	*ft_fill_base(unsigned int nbr, int size, char *base, char *res)$/;"	f	file:
ft_find_cmd_path	lib/libft/src/utils/ft_find_cmd_path.c	/^char	*ft_find_cmd_path(char **envp, const char *cmd)$/;"	f
ft_find_end	lib/libft/src/printf/ft_parse_format.c	/^static char	*ft_find_end(const char *start, t_format_spec *spec)$/;"	f	file:
ft_free_memory	lib/libft/src/string/ft_split.c	/^static void	ft_free_memory(char **tab, size_t i)$/;"	f	file:
ft_getenv	lib/libft/src/utils/ft_getenv.c	/^char	*ft_getenv(char **envp, const char *name)$/;"	f
ft_handle_char	lib/libft/src/printf/ft_handle_char.c	/^void	ft_handle_char(t_format_spec spec, va_list args, t_buffer *buf_info)$/;"	f
ft_handle_hash_flag	lib/libft/src/printf/ft_handle_hash_flag.c	/^void	ft_handle_hash_flag(t_format_spec spec, int content, t_buffer *buf_info)$/;"	f
ft_handle_hexadecimal	lib/libft/src/printf/ft_handle_hexadecimal.c	/^int	ft_handle_hexadecimal(t_format_spec spec, va_list args, t_buffer *buf_info)$/;"	f
ft_handle_int	lib/libft/src/printf/ft_handle_int.c	/^int	ft_handle_int(t_format_spec spec, va_list args, t_buffer *buf_info)$/;"	f
ft_handle_plus_flag	lib/libft/src/printf/ft_handle_plus_flag.c	/^void	ft_handle_plus_flag(t_format_spec spec, int content, t_buffer *buf_info)$/;"	f
ft_handle_pointer	lib/libft/src/printf/ft_handle_pointer.c	/^int	ft_handle_pointer(t_format_spec spec, va_list args, t_buffer *buf_info)$/;"	f
ft_handle_space_flag	lib/libft/src/printf/ft_handle_space_flag.c	/^void	ft_handle_space_flag(t_format_spec spec, int content,$/;"	f
ft_handle_string	lib/libft/src/printf/ft_handle_string.c	/^void	ft_handle_string(t_format_spec spec, va_list args, t_buffer *buf_info)$/;"	f
ft_intlen	lib/libft/src/conversion/ft_itoa.c	/^static size_t	ft_intlen(long n)$/;"	f	file:
ft_isalnum	lib/libft/src/bool/ft_isalnum.c	/^bool	ft_isalnum(int c)$/;"	f
ft_isalpha	lib/libft/src/bool/ft_isalpha.c	/^bool	ft_isalpha(int c)$/;"	f
ft_isalpha_suite	lib/libft/test_src/bool/test_ft_isalpha.c	/^Suite *ft_isalpha_suite(void)$/;"	f
ft_isascii	lib/libft/src/bool/ft_isascii.c	/^bool ft_isascii(int c)$/;"	f
ft_isconvert_spec	lib/libft/src/printf/ft_isconvert_spec.c	/^int	ft_isconvert_spec(char c)$/;"	f
ft_isdigit	lib/libft/src/bool/ft_isdigit.c	/^bool ft_isdigit(int c)$/;"	f
ft_isflag	lib/libft/src/printf/ft_isflag.c	/^int	ft_isflag(char c)$/;"	f
ft_isprint	lib/libft/src/bool/ft_isprint.c	/^bool	ft_isprint(int c)$/;"	f
ft_issign	lib/libft/src/conversion/ft_atoi.c	/^static int	ft_issign(int c, int *sign)$/;"	f	file:
ft_issign	lib/libft/src/conversion/ft_atol.c	/^static int	ft_issign(int c, int *sign)$/;"	f	file:
ft_isspace	lib/libft/src/bool/ft_isspace.c	/^bool	ft_isspace(int c)$/;"	f
ft_isxdigit	lib/libft/src/bool/ft_isxdigit.c	/^bool	ft_isxdigit(int c)$/;"	f
ft_itoa	lib/libft/src/conversion/ft_itoa.c	/^char	*ft_itoa(int n)$/;"	f
ft_memchr	lib/libft/src/memory/ft_memchr.c	/^void	*ft_memchr(const void *s, int c, size_t n)$/;"	f
ft_memcmp	lib/libft/src/memory/ft_memcmp.c	/^int	ft_memcmp(const void *s1, const void *s2, size_t n)$/;"	f
ft_memcpy	lib/libft/src/memory/ft_memcpy.c	/^void	*ft_memcpy(void *dest, const void *src, size_t n)$/;"	f
ft_memmove	lib/libft/src/memory/ft_memmove.c	/^void	*ft_memmove(void *dest, const void *src, size_t n)$/;"	f
ft_memset	lib/libft/src/memory/ft_memset.c	/^void	*ft_memset(void *s, int c, size_t n)$/;"	f
ft_nbr_len	lib/libft/src/printf/ft_nbr_len.c	/^int	ft_nbr_len(unsigned long long nbr, int base_len)$/;"	f
ft_new_str	lib/libft/src/printf/ft_apply_precision.c	/^static int	ft_new_str(char **new_str, t_format_spec *spec, int total_len,$/;"	f	file:
ft_parse_flags	lib/libft/src/printf/ft_parse_flags.c	/^void	ft_parse_flags(const char *format, t_format_spec *spec)$/;"	f
ft_parse_format	lib/libft/src/printf/ft_parse_format.c	/^t_format_spec	ft_parse_format(const char **format)$/;"	f
ft_parse_precision	lib/libft/src/printf/ft_parse_flags.c	/^static void	ft_parse_precision(const char *format, t_format_spec *spec,$/;"	f	file:
ft_parse_width	lib/libft/src/printf/ft_parse_flags.c	/^static void	ft_parse_width(const char *format, t_format_spec *spec, size_t *i)$/;"	f	file:
ft_prepare_hex_content	lib/libft/src/printf/ft_handle_hexadecimal.c	/^static int	ft_prepare_hex_content(t_format_spec spec, unsigned int content,$/;"	f	file:
ft_prepare_int	lib/libft/src/printf/ft_handle_int.c	/^static int	ft_prepare_int(t_format_spec spec, long long content,$/;"	f	file:
ft_prepare_pointer	lib/libft/src/printf/ft_handle_pointer.c	/^static int	ft_prepare_pointer(char **adresse, t_buffer *buf_info, void *ptr)$/;"	f	file:
ft_printf	lib/libft/src/printf/ft_printf.c	/^int	ft_printf(const char *format, ...)$/;"	f
ft_printf_fd	lib/libft/src/printf/ft_printf.c	/^int	ft_printf_fd(int fd, const char *format, ...)$/;"	f
ft_process_format_specifier	lib/libft/src/printf/ft_printf.c	/^static int	ft_process_format_specifier(const char **format, va_list args,$/;"	f	file:
ft_process_formatted_hex	lib/libft/src/printf/ft_handle_hexadecimal.c	/^static void	ft_process_formatted_hex(t_format_spec spec, unsigned int content,$/;"	f	file:
ft_process_int	lib/libft/src/printf/ft_handle_int.c	/^static void	ft_process_int(t_format_spec spec, long long content,$/;"	f	file:
ft_process_pointer	lib/libft/src/printf/ft_handle_pointer.c	/^static void	ft_process_pointer(t_format_spec spec, char *adresse,$/;"	f	file:
ft_psh_flags	lib/libft/src/printf/ft_parse_flags.c	/^static void	ft_psh_flags(const char *format, t_format_spec *spec, size_t *i)$/;"	f	file:
ft_putchar_fd	lib/libft/src/io/ft_putchar_fd.c	/^void	ft_putchar_fd(char c, int fd)$/;"	f
ft_putendl_fd	lib/libft/src/io/ft_putendl_fd.c	/^void	ft_putendl_fd(char *s, int fd)$/;"	f
ft_putnbr_fd	lib/libft/src/io/ft_putnbr_fd.c	/^void	ft_putnbr_fd(int n, int fd)$/;"	f
ft_putstr_fd	lib/libft/src/io/ft_putstr_fd.c	/^void	ft_putstr_fd(char *s, int fd)$/;"	f
ft_realloc	lib/libft/src/memory/ft_realloc.c	/^void	*ft_realloc(void *ptr, size_t old_size, size_t new_size)$/;"	f
ft_split	lib/libft/src/string/ft_split.c	/^char	**ft_split(char const *s, char c)$/;"	f
ft_strchr	lib/libft/src/string/ft_strchr.c	/^char	*ft_strchr(const char *s, int c)$/;"	f
ft_strdup	lib/libft/src/string/ft_strdup.c	/^char	*ft_strdup(const char *s)$/;"	f
ft_striteri	lib/libft/src/string/ft_striteri.c	/^void	ft_striteri(char *s, void (*f)(unsigned int, char*))$/;"	f
ft_strjoin	lib/libft/src/string/ft_strjoin.c	/^char	*ft_strjoin(char const *s1, char const *s2)$/;"	f
ft_strjoin_free	lib/libft/src/string/ft_strjoin.c	/^char	*ft_strjoin_free(char *s1, const char *s2)$/;"	f
ft_strlcat	lib/libft/src/string/ft_strlcat.c	/^size_t	ft_strlcat(char *dst, const char *src, size_t size)$/;"	f
ft_strlcpy	lib/libft/src/string/ft_strlcpy.c	/^size_t	ft_strlcpy(char *dst, const char *src, size_t size)$/;"	f
ft_strlen	lib/libft/src/string/ft_strlen.c	/^size_t	ft_strlen(const char *s)$/;"	f
ft_strmapi	lib/libft/src/string/ft_strmapi.c	/^char	*ft_strmapi(char const *s, char (*f)(unsigned int, char))$/;"	f
ft_strncmp	lib/libft/src/string/ft_strncmp.c	/^int	ft_strncmp(const char *s1, const char *s2, size_t n)$/;"	f
ft_strnstr	lib/libft/src/string/ft_strnstr.c	/^char	*ft_strnstr(const char *haystack, const char *needle, size_t len)$/;"	f
ft_strrchr	lib/libft/src/string/ft_strrchr.c	/^char	*ft_strrchr(const char *s, int c)$/;"	f
ft_strtrim	lib/libft/src/string/ft_strtrim.c	/^char	*ft_strtrim(char const *s1, char const *set)$/;"	f
ft_substr	lib/libft/src/string/ft_substr.c	/^char	*ft_substr(char const *s, unsigned int start, size_t len)$/;"	f
ft_substr_len	lib/libft/src/string/ft_split.c	/^static size_t	ft_substr_len(char *str, char c)$/;"	f	file:
ft_tolower	lib/libft/src/conversion/ft_tolower.c	/^int	ft_tolower(int c)$/;"	f
ft_toupper	lib/libft/src/conversion/ft_toupper.c	/^int	ft_toupper(int c)$/;"	f
ft_ulltoa_base	lib/libft/src/conversion/ft_ulltoa_base.c	/^char	*ft_ulltoa_base(unsigned long long nbr, char *base)$/;"	f
ft_utoa_base	lib/libft/src/conversion/ft_utoa_base.c	/^char	*ft_utoa_base(unsigned int nbr, char *base)$/;"	f
ft_zero_minus_flags	lib/libft/src/printf/ft_parse_flags.c	/^static void	ft_zero_minus_flags(const char *format, t_format_spec *spec,$/;"	f	file:
g_perror	lib/libft/src/printf/ft_printf_globals.c	/^const char	*g_perror[] = {$/;"	v
generate_src_list	lib/libft/update_makefile.sh	/^generate_src_list() {$/;"	f
index	lib/libft/include/libft.h	/^	int		index;$/;"	m	struct:s_buffer
isalnum_suite	lib/libft/test_src/bool/test_ft_isalnum.c	/^Suite *isalnum_suite(void)$/;"	f
main	lib/libft/test_src/bool/test_ft_isalnum.c	/^int main(void)$/;"	f
main	lib/libft/test_src/bool/test_ft_isalpha.c	/^int main(void)$/;"	f
main	lib/libft/test_src/memory/test_ft_memset.c	/^int main(void)$/;"	f
main	main.c	/^int	main(int argc, char **argv, char **envp)$/;"	f
main	test_src/init_shell/test_ms_get_user_input.c	/^int	main(void)$/;"	f
main	test_src/init_shell/test_ms_init_shell.c	/^int main(void) {$/;"	f
memset_suite	lib/libft/test_src/memory/test_ft_memset.c	/^Suite *memset_suite(void)$/;"	f
minishell_suite	test_src/init_shell/test_ms_get_user_input.c	/^Suite	*minishell_suite(void)$/;"	f
minishell_suite	test_src/init_shell/test_ms_init_shell.c	/^Suite *minishell_suite(void) {$/;"	f
mock_add_history	test_src/init_shell/test_ms_get_user_input.c	/^void	mock_add_history(const char *line)$/;"	f
mock_readline	test_src/init_shell/test_ms_get_user_input.c	/^char	*mock_readline(const char *prompt)$/;"	f
ms_get_user_input	src/init_shell/ms_get_user_input.c	/^void	ms_get_user_input(t_shell *shell)$/;"	f
ms_init_shell	src/init_shell/ms_init_shell.c	/^t_shell	ms_init_shell(int argc, char **envp)$/;"	f
nb_printed	lib/libft/include/libft.h	/^	int		nb_printed;$/;"	m	struct:s_buffer
precision	lib/libft/include/libft.h	/^	int			precision;$/;"	m	struct:s_format_spec
s_buffer	lib/libft/include/libft.h	/^typedef struct s_buffer$/;"	s
s_format_spec	lib/libft/include/libft.h	/^typedef struct s_format_spec$/;"	s
s_shell	include/minishell.h	/^typedef struct s_shell$/;"	s
t_buffer	lib/libft/include/libft.h	/^}			t_buffer;$/;"	t	typeref:struct:s_buffer
t_error	lib/libft/include/libft.h	/^}	t_error;$/;"	t	typeref:enum:e_error
t_format_spec	lib/libft/include/libft.h	/^}				t_format_spec;$/;"	t	typeref:struct:s_format_spec
t_shell	include/minishell.h	/^}			t_shell;$/;"	t	typeref:struct:s_shell
type	lib/libft/include/libft.h	/^	char		type;$/;"	m	struct:s_format_spec
user_input	include/minishell.h	/^	char	*user_input;$/;"	m	struct:s_shell
width	lib/libft/include/libft.h	/^	int			width;$/;"	m	struct:s_format_spec
