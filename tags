!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
AST_H	include/ast.h	14;"	d
BLUE	Makefile	/^BLUE    = \\033[34m$/;"	m
BOLD	Makefile	/^BOLD    = \\033[1m$/;"	m
BUILTIN_H	include/builtin.h	14;"	d
CC	Makefile	/^CC = 		cc$/;"	m
CC	Makefile	/^default: CC = cc$/;"	m
CC	Makefile	/^san: CC = clang$/;"	m
CC	Makefile	/^val: CC = cc$/;"	m
CFLAGS	Makefile	/^CFLAGS = 	-Wall -Wextra -Werror$/;"	m
COPY_MODE	include/exec.h	17;"	d
DEPFLAGS	Makefile	/^DEPFLAGS =  -MMD -MP$/;"	m
DEPS	Makefile	/^DEPS = 		$(OBJ:.o=.d)$/;"	m
DirectoryOfThisScript	ycm_extra_conf.py	/^def DirectoryOfThisScript():$/;"	f
ERR	include/ast.h	/^	ERR$/;"	e	enum:e_node_type
EXEC_H	include/exec.h	14;"	d
FlagsForFile	ycm_extra_conf.py	/^def FlagsForFile(filename):$/;"	f
GREEN	Makefile	/^GREEN   = \\033[32m$/;"	m
HELG	Makefile	/^HELG =      valgrind --tool=helgrind --history-level=full \\$/;"	m
HEREDOC_TMP_FILE	include/exec.h	16;"	d
INCLUDES	Makefile	/^INCLUDES = -I.\/include -I.\/lib\/libgc\/include -I.\/lib\/libft\/include$/;"	m
LDFLAGS	Makefile	/^LDFLAGS = -lreadline -L.\/lib\/libgc -lgc -L.\/lib\/libft -lft$/;"	m
MINISHELL_H	include/minishell.h	14;"	d
MakeRelativePathsAbsolute	ycm_extra_conf.py	/^def MakeRelativePathsAbsolute(flags, working_directory):$/;"	f
NAME	Makefile	/^NAME = Minishell$/;"	m
NODE_AND	include/ast.h	/^	NODE_AND,$/;"	e	enum:e_node_type
NODE_COMMAND	include/ast.h	/^	NODE_COMMAND,$/;"	e	enum:e_node_type
NODE_OR	include/ast.h	/^	NODE_OR,$/;"	e	enum:e_node_type
NODE_PIPE	include/ast.h	/^	NODE_PIPE,$/;"	e	enum:e_node_type
NODE_REDIRECT_APPEND	include/ast.h	/^	NODE_REDIRECT_APPEND,$/;"	e	enum:e_node_type
NODE_REDIRECT_HEREDOC	include/ast.h	/^	NODE_REDIRECT_HEREDOC,$/;"	e	enum:e_node_type
NODE_REDIRECT_IN	include/ast.h	/^	NODE_REDIRECT_IN,$/;"	e	enum:e_node_type
NODE_REDIRECT_OUT	include/ast.h	/^	NODE_REDIRECT_OUT,$/;"	e	enum:e_node_type
NODE_SUBSHELL	include/ast.h	/^	NODE_SUBSHELL,$/;"	e	enum:e_node_type
OBJ	Makefile	/^OBJ = 		$(SRC:$(SRC_DIR)\/%.c=$(OBJ_DIR)\/%.o)$/;"	m
OBJ_DIR	Makefile	/^OBJ_DIR = 	obj$/;"	m
RED	Makefile	/^RED     = \\033[31m$/;"	m
RESET	Makefile	/^RESET   = \\033[0m$/;"	m
SANITIZE	Makefile	/^SANITIZE = 	-g3 -fPIC -fsanitize=thread$/;"	m
SCRIPT_URL	Makefile	/^SCRIPT_URL = https:\/\/github.com\/jeromeDev94\/make_interface.git$/;"	m
SRC	Makefile	/^SRC = \\$/;"	m
SRC_DIR	Makefile	/^SRC_DIR = 	src$/;"	m
START_TEST	test_src/ast/test_ms_parse_tokens.c	/^START_TEST(test_create_command_node)$/;"	f
START_TEST	test_src/ast/test_ms_parse_tokens.c	/^START_TEST(test_parse_complex_command)$/;"	f
START_TEST	test_src/ast/test_ms_parse_tokens.c	/^START_TEST(test_parse_empty_input)$/;"	f
START_TEST	test_src/ast/test_ms_parse_tokens.c	/^START_TEST(test_parse_heredoc)$/;"	f
START_TEST	test_src/ast/test_ms_parse_tokens.c	/^START_TEST(test_parse_logical)$/;"	f
START_TEST	test_src/ast/test_ms_parse_tokens.c	/^START_TEST(test_parse_pipeline)$/;"	f
START_TEST	test_src/ast/test_ms_parse_tokens.c	/^START_TEST(test_parse_redirection)$/;"	f
START_TEST	test_src/ast/test_ms_parse_tokens.c	/^START_TEST(test_parse_simple_command)$/;"	f
START_TEST	test_src/ast/test_ms_parse_tokens.c	/^START_TEST(test_parse_subshell)$/;"	f
START_TEST	test_src/ast/test_ms_parse_tokens.c	/^START_TEST(test_parse_syntax_error)$/;"	f
START_TEST	test_src/ast/test_ms_parse_tokens.c	/^START_TEST(test_parse_unexpected_token)$/;"	f
START_TEST	test_src/env_lst_utils/test_ms_env_add_back.c	/^START_TEST(test_add_null_node) {$/;"	f
START_TEST	test_src/env_lst_utils/test_ms_env_add_back.c	/^START_TEST(test_add_to_empty_list) {$/;"	f
START_TEST	test_src/env_lst_utils/test_ms_env_add_back.c	/^START_TEST(test_add_to_non_empty_list) {$/;"	f
START_TEST	test_src/env_lst_utils/test_ms_env_add_back.c	/^START_TEST(test_add_with_null_env) {$/;"	f
START_TEST	test_src/env_lst_utils/test_ms_env_create_node.c	/^START_TEST(test_create_node_basic)$/;"	f
START_TEST	test_src/env_lst_utils/test_ms_env_create_node.c	/^START_TEST(test_create_node_no_equals)$/;"	f
START_TEST	test_src/env_lst_utils/test_ms_env_create_node.c	/^START_TEST(test_create_node_no_value)$/;"	f
START_TEST	test_src/init_shell/test_ms_get_user_input.c	/^START_TEST(test_ms_get_user_input_empty)$/;"	f
START_TEST	test_src/init_shell/test_ms_get_user_input.c	/^START_TEST(test_ms_get_user_input_normal)$/;"	f
START_TEST	test_src/init_shell/test_ms_get_user_input.c	/^START_TEST(test_ms_get_user_input_special_chars)$/;"	f
START_TEST	test_src/init_shell/test_ms_init_env.c	/^START_TEST(test_ms_init_env_with_envp)$/;"	f
START_TEST	test_src/init_shell/test_ms_init_env.c	/^START_TEST(test_ms_init_env_without_envp)$/;"	f
START_TEST	test_src/init_shell/test_ms_init_shell.c	/^START_TEST(test_ms_init_shell_no_args)$/;"	f
START_TEST	test_src/init_shell/test_ms_init_shell.c	/^START_TEST(test_ms_init_shell_with_empty_envp)$/;"	f
START_TEST	test_src/init_shell/test_ms_init_shell.c	/^START_TEST(test_ms_init_shell_with_envp)$/;"	f
START_TEST	test_src/init_shell/test_ms_init_shell.c	/^START_TEST(test_ms_init_shell_with_invalid_argc)$/;"	f
START_TEST	test_src/signal/test_ms_init_std_signal.c	/^START_TEST(test_ms_init_std_signal_sigint)$/;"	f
START_TEST	test_src/signal/test_ms_init_std_signal.c	/^START_TEST(test_ms_init_std_signal_sigquit)$/;"	f
START_TEST	test_src/signal/test_ms_stop_std_signal.c	/^START_TEST(test_ms_stop_std_signal_sigint)$/;"	f
START_TEST	test_src/signal/test_ms_stop_std_signal.c	/^START_TEST(test_ms_stop_std_signal_sigquit)$/;"	f
START_TEST	test_src/syntax_error/test_ms_syntax_error.c	/^START_TEST(test_ms_syntax_error_invalid_dq_0)$/;"	f
START_TEST	test_src/syntax_error/test_ms_syntax_error.c	/^START_TEST(test_ms_syntax_error_invalid_dq_1)$/;"	f
START_TEST	test_src/syntax_error/test_ms_syntax_error.c	/^START_TEST(test_ms_syntax_error_invalid_op_0)$/;"	f
START_TEST	test_src/syntax_error/test_ms_syntax_error.c	/^START_TEST(test_ms_syntax_error_invalid_op_1)$/;"	f
START_TEST	test_src/syntax_error/test_ms_syntax_error.c	/^START_TEST(test_ms_syntax_error_invalid_op_2)$/;"	f
START_TEST	test_src/syntax_error/test_ms_syntax_error.c	/^START_TEST(test_ms_syntax_error_invalid_op_3)$/;"	f
START_TEST	test_src/syntax_error/test_ms_syntax_error.c	/^START_TEST(test_ms_syntax_error_invalid_p_0)$/;"	f
START_TEST	test_src/syntax_error/test_ms_syntax_error.c	/^START_TEST(test_ms_syntax_error_invalid_p_1)$/;"	f
START_TEST	test_src/syntax_error/test_ms_syntax_error.c	/^START_TEST(test_ms_syntax_error_invalid_p_2)$/;"	f
START_TEST	test_src/syntax_error/test_ms_syntax_error.c	/^START_TEST(test_ms_syntax_error_invalid_p_3)$/;"	f
START_TEST	test_src/syntax_error/test_ms_syntax_error.c	/^START_TEST(test_ms_syntax_error_invalid_p_4)$/;"	f
START_TEST	test_src/syntax_error/test_ms_syntax_error.c	/^START_TEST(test_ms_syntax_error_invalid_p_5)$/;"	f
START_TEST	test_src/syntax_error/test_ms_syntax_error.c	/^START_TEST(test_ms_syntax_error_invalid_p_6)$/;"	f
START_TEST	test_src/syntax_error/test_ms_syntax_error.c	/^START_TEST(test_ms_syntax_error_invalid_p_7)$/;"	f
START_TEST	test_src/syntax_error/test_ms_syntax_error.c	/^START_TEST(test_ms_syntax_error_invalid_p_8)$/;"	f
START_TEST	test_src/syntax_error/test_ms_syntax_error.c	/^START_TEST(test_ms_syntax_error_invalid_r_0)$/;"	f
START_TEST	test_src/syntax_error/test_ms_syntax_error.c	/^START_TEST(test_ms_syntax_error_invalid_r_1)$/;"	f
START_TEST	test_src/syntax_error/test_ms_syntax_error.c	/^START_TEST(test_ms_syntax_error_invalid_r_2)$/;"	f
START_TEST	test_src/syntax_error/test_ms_syntax_error.c	/^START_TEST(test_ms_syntax_error_invalid_sq_0)$/;"	f
START_TEST	test_src/syntax_error/test_ms_syntax_error.c	/^START_TEST(test_ms_syntax_error_invalid_sq_1)$/;"	f
START_TEST	test_src/syntax_error/test_ms_syntax_error.c	/^START_TEST(test_ms_syntax_error_valid_dq_0)$/;"	f
START_TEST	test_src/syntax_error/test_ms_syntax_error.c	/^START_TEST(test_ms_syntax_error_valid_op_0)$/;"	f
START_TEST	test_src/syntax_error/test_ms_syntax_error.c	/^START_TEST(test_ms_syntax_error_valid_p_0)$/;"	f
START_TEST	test_src/syntax_error/test_ms_syntax_error.c	/^START_TEST(test_ms_syntax_error_valid_p_1)$/;"	f
START_TEST	test_src/syntax_error/test_ms_syntax_error.c	/^START_TEST(test_ms_syntax_error_valid_p_2)$/;"	f
START_TEST	test_src/syntax_error/test_ms_syntax_error.c	/^START_TEST(test_ms_syntax_error_valid_p_3)$/;"	f
START_TEST	test_src/syntax_error/test_ms_syntax_error.c	/^START_TEST(test_ms_syntax_error_valid_p_4)$/;"	f
START_TEST	test_src/syntax_error/test_ms_syntax_error.c	/^START_TEST(test_ms_syntax_error_valid_r_0)$/;"	f
START_TEST	test_src/syntax_error/test_ms_syntax_error.c	/^START_TEST(test_ms_syntax_error_valid_sq_0)$/;"	f
START_TEST	test_src/token/test_lst_tokens.c	/^START_TEST(test_add_multiple_tokens)$/;"	f
START_TEST	test_src/token/test_lst_tokens.c	/^START_TEST(test_add_token)$/;"	f
START_TEST	test_src/token/test_lst_tokens.c	/^START_TEST(test_add_token_null_head)$/;"	f
START_TEST	test_src/token/test_lst_tokens.c	/^START_TEST(test_add_token_null_token)$/;"	f
START_TEST	test_src/token/test_lst_tokens.c	/^START_TEST(test_create_token)$/;"	f
START_TEST	test_src/token/test_ms_tokenize.c	/^START_TEST(test_command_with_logical_operators)$/;"	f
START_TEST	test_src/token/test_ms_tokenize.c	/^START_TEST(test_command_with_multiple_redirections)$/;"	f
START_TEST	test_src/token/test_ms_tokenize.c	/^START_TEST(test_command_with_pipe)$/;"	f
START_TEST	test_src/token/test_ms_tokenize.c	/^START_TEST(test_command_with_quotes)$/;"	f
START_TEST	test_src/token/test_ms_tokenize.c	/^START_TEST(test_command_with_redirection)$/;"	f
START_TEST	test_src/token/test_ms_tokenize.c	/^START_TEST(test_command_with_single_quotes)$/;"	f
START_TEST	test_src/token/test_ms_tokenize.c	/^START_TEST(test_command_with_subshell)$/;"	f
START_TEST	test_src/token/test_ms_tokenize.c	/^START_TEST(test_command_with_wildcards)$/;"	f
START_TEST	test_src/token/test_ms_tokenize.c	/^START_TEST(test_complex_command)$/;"	f
START_TEST	test_src/token/test_ms_tokenize.c	/^START_TEST(test_empty_input)$/;"	f
START_TEST	test_src/token/test_ms_tokenize.c	/^START_TEST(test_input_with_only_whitespace)$/;"	f
START_TEST	test_src/token/test_ms_tokenize.c	/^START_TEST(test_simple_command)$/;"	f
START_TEST	test_src/token/test_tokenize_frame.c	/^START_TEST(test_tokenize_frame_basic)$/;"	f
START_TEST	test_src/token/test_tokenize_frame.c	/^START_TEST(test_tokenize_frame_null_input)$/;"	f
START_TEST	test_src/token/test_tokenize_operator.c	/^START_TEST(test_tokenize_invalid_operator)$/;"	f
START_TEST	test_src/token/test_tokenize_operator.c	/^START_TEST(test_tokenize_operator_basic)$/;"	f
START_TEST	test_src/token/test_tokenize_operator.c	/^START_TEST(test_tokenize_operator_null_input)$/;"	f
START_TEST	test_src/token/test_tokenize_word.c	/^START_TEST(test_tokenize_word_basic)$/;"	f
START_TEST	test_src/token/test_tokenize_word.c	/^START_TEST(test_tokenize_word_empty_input)$/;"	f
START_TEST	test_src/token/test_tokenize_word.c	/^START_TEST(test_tokenize_word_null_input)$/;"	f
START_TEST	test_src/token/test_tokenize_word.c	/^START_TEST(test_tokenize_word_with_whitespace)$/;"	f
STDERR	include/tokenize.h	16;"	d
STDERR_BUFFER_SIZE	test_src/syntax_error/test_ms_syntax_error.c	19;"	d	file:
SYNTAX_H	include/syntax.h	14;"	d
TOKENIZE_H	include/tokenize.h	14;"	d
TOKEN_AND	include/tokenize.h	/^	TOKEN_AND,$/;"	e	enum:e_token_type
TOKEN_EXPAND	include/tokenize.h	/^	TOKEN_EXPAND,$/;"	e	enum:e_token_type
TOKEN_OR	include/tokenize.h	/^	TOKEN_OR,$/;"	e	enum:e_token_type
TOKEN_PIPE	include/tokenize.h	/^	TOKEN_PIPE,$/;"	e	enum:e_token_type
TOKEN_REDIRECTION	include/tokenize.h	/^	TOKEN_REDIRECTION,$/;"	e	enum:e_token_type
TOKEN_SUBSHELL_START	include/tokenize.h	/^	TOKEN_SUBSHELL_START,$/;"	e	enum:e_token_type
TOKEN_SUBSHELL_STOP	include/tokenize.h	/^	TOKEN_SUBSHELL_STOP,$/;"	e	enum:e_token_type
TOKEN_WORD	include/tokenize.h	/^	TOKEN_WORD,$/;"	e	enum:e_token_type
TOTAL_STEPS	Makefile	/^TOTAL_STEPS := $(words $(OBJ))$/;"	m
VALG	Makefile	/^VALG =		valgrind --leak-check=full --show-leak-kinds=all \\$/;"	m
VERBOSE	Makefile	/^VERBOSE ?= @$/;"	m
VERBOSE	Makefile	/^classic: VERBOSE =$/;"	m
VFLAGS	Makefile	/^VFLAGS = 	-g3 -fPIC $/;"	m
YELLOW	Makefile	/^YELLOW  = \\033[33m$/;"	m
add_token	src/token/lst_tokens.c	/^void	add_token(t_token **head, t_token *new_token, t_gc *gcl)$/;"	f
allocator	src/token/tokenize_operator.c	/^static t_token	*allocator(const char **input, t_op_state *v, t_gc *gcl)$/;"	f	file:
argc	include/ast.h	/^	int		argc;$/;"	m	struct:s_cmd_node
argc_count	src/ast/create_command_node.c	/^static int	argc_count(t_token **current)$/;"	f	file:
argv	include/ast.h	/^	char	**argv;$/;"	m	struct:s_cmd_node
assign_token_to_argv	src/ast/create_command_node.c	/^static void	assign_token_to_argv(t_token **current, char **argv)$/;"	f	file:
ast_suite	test_src/ast/test_ms_parse_tokens.c	/^Suite *ast_suite(void)$/;"	f
check_error	src/syntax_error/check_error.c	/^int	check_error(t_syntax **syntax)$/;"	f
check_reinit	src/syntax_error/check_reinit.c	/^int	check_reinit(t_syntax **syntax)$/;"	f
child	include/ast.h	/^	struct s_ast_node	*child;$/;"	m	struct:s_heredoc_node	typeref:struct:s_heredoc_node::s_ast_node
child	include/ast.h	/^	struct s_ast_node	*child;$/;"	m	struct:s_redirect_node	typeref:struct:s_redirect_node::s_ast_node
child	include/ast.h	/^	struct s_ast_node	*child;$/;"	m	struct:s_subshell_node	typeref:struct:s_subshell_node::s_ast_node
child_process	src/exec/ms_execute_pipeline.c	/^static void	child_process(t_pipe_context *pipe_context, t_pipe_node *pipe_node,$/;"	f	file:
command	include/ast.h	/^	t_cmd_node			command;$/;"	m	union:u_node_data
compilation_database_folder	ycm_extra_conf.py	/^compilation_database_folder = ''$/;"	v
context	include/exec.h	/^	t_exec_context	*context;$/;"	m	struct:s_pipe_context
copy_token_value	src/token/tokenize_word.c	/^static int	copy_token_value(char *value, const char *current, char start_quote)$/;"	f	file:
create_command_node	src/ast/create_command_node.c	/^t_ast_node	*create_command_node(t_token **current_token, t_gc *gcl)$/;"	f
create_env_node	test_src/env_lst_utils/test_ms_env_add_back.c	/^t_env *create_env_node(const char *var, const char *value) {$/;"	f
create_heredoc_node	src/ast/create_node.c	/^t_ast_node	*create_heredoc_node(t_ast_node *child, char *delimiter, t_gc *gcl)$/;"	f
create_logical_node	src/ast/create_node.c	/^t_ast_node	*create_logical_node(t_node_type type, t_ast_node *left,$/;"	f
create_pipe_node	src/ast/create_node.c	/^t_ast_node	*create_pipe_node(t_ast_node *left, t_ast_node *right, t_gc *gcl)$/;"	f
create_redirect_node	src/ast/create_node.c	/^t_ast_node	*create_redirect_node(t_node_type type, t_ast_node *child,$/;"	f
create_subshell_node	src/ast/create_node.c	/^t_ast_node	*create_subshell_node(t_ast_node *child, t_gc *gcl)$/;"	f
create_token	src/token/lst_tokens.c	/^t_token	*create_token(t_token_type type, const char *value, t_gc *gcl)$/;"	f
create_tokens	test_src/ast/test_ms_parse_tokens.c	/^t_token *create_tokens(t_gc *gcl, int count, ...)$/;"	f
current	include/syntax.h	/^	char	*current;$/;"	m	struct:s_syntax
current	include/tokenize.h	/^	char					*current;$/;"	m	struct:s_op_state
current	include/tokenize.h	/^	const char	*current;$/;"	m	struct:s_copy_state
current	include/tokenize.h	/^	const char	*current;$/;"	m	struct:s_token_state
data	include/ast.h	/^	t_node_data	data;$/;"	m	struct:s_ast_node
define_type	src/ast/parse_redirection.c	/^static t_node_type	define_type(t_token **current_token)$/;"	f	file:
delimiter	include/ast.h	/^	char				*delimiter;$/;"	m	struct:s_heredoc_node
dq_trigger	include/syntax.h	/^	int		dq_trigger;$/;"	m	struct:s_syntax
e_node_type	include/ast.h	/^typedef enum e_node_type$/;"	g
e_token_type	include/tokenize.h	/^typedef enum e_token_type$/;"	g
env	include/minishell.h	/^	t_env	*env;$/;"	m	struct:s_env_data
env_data	include/minishell.h	/^	t_env_data	*env_data;$/;"	m	struct:s_shell
env_exist	include/minishell.h	/^	bool	env_exist;$/;"	m	struct:s_env_data
env_suite	test_src/env_lst_utils/test_ms_env_create_node.c	/^Suite *env_suite(void)$/;"	f
error	include/syntax.h	/^	int		error;$/;"	m	struct:s_syntax
error_code	include/minishell.h	/^	int			error_code;$/;"	m	struct:s_shell
execute_and_capture	test_src/syntax_error/test_ms_syntax_error.c	/^static t_testresult execute_and_capture(const char *input)$/;"	f	file:
exit_code	test_src/syntax_error/test_ms_syntax_error.c	/^    int exit_code;$/;"	m	struct:s_testresult	file:
exit_status	include/exec.h	/^	int			exit_status;$/;"	m	struct:s_exec_context
filename	include/ast.h	/^	char				*filename;$/;"	m	struct:s_redirect_node
flag	src/builtin/ms_export.c	/^	int		flag;$/;"	m	struct:s_export_utils	file:
flags	ycm_extra_conf.py	/^flags = [$/;"	v
free_env_list	test_src/env_lst_utils/test_ms_env_add_back.c	/^void free_env_list(t_env *env) {$/;"	f
ft_atoll_safe	src/builtin/ms_exit.c	/^static long long	ft_atoll_safe(const char *str, int *error)$/;"	f	file:
ft_echo_utils	src/builtin/ms_echo.c	/^static int	ft_echo_utils(int i, int j, char **cmd, int *error)$/;"	f	file:
ft_env	src/builtin/ms_env.c	/^int	ft_env(t_cmd_node *cmd_node, t_exec_context *context)$/;"	f
ft_extract_folder	src/builtin/ms_export.c	/^static char	*ft_extract_folder(t_shell *shell, char *cmd)$/;"	f	file:
ft_extract_value	src/builtin/ms_export.c	/^static char	*ft_extract_value(t_shell *shell, char *cmd, int size, char *folder)$/;"	f	file:
ft_first_arg	src/builtin/ms_env.c	/^static char	*ft_first_arg(char **strs)$/;"	f	file:
ft_is_n	src/builtin/ms_echo.c	/^static int	ft_is_n(char *str)$/;"	f	file:
ft_numeric_code	src/builtin/ms_exit.c	/^int	ft_numeric_code(char *str)$/;"	f
ft_order_env	src/builtin/ms_export.c	/^void	ft_order_env(t_exec_context *context)$/;"	f
ft_print_env	src/builtin/ms_env.c	/^static int	ft_print_env(t_env *env)$/;"	f	file:
ft_print_order	src/builtin/ms_export.c	/^void	ft_print_order(t_exec_context *context)$/;"	f
ft_valid_numeric_code	src/builtin/ms_exit.c	/^int	ft_valid_numeric_code(char *str)$/;"	f
ft_valide_var	src/builtin/ms_export.c	/^static int	ft_valide_var(char *input)$/;"	f	file:
ft_whithout_minus	src/builtin/ms_env.c	/^static char	*ft_whithout_minus(char *str)$/;"	f	file:
g_garbage_collector	test_src/syntax_error/test_ms_syntax_error.c	/^static t_gc *g_garbage_collector;  \/\/ Déclaration globale du garbage collector$/;"	v	file:
g_signal	src/global.c	/^int	g_signal;$/;"	v
gcl	include/minishell.h	/^	t_gc		*gcl;$/;"	m	struct:s_shell
gcl	test_src/ast/test_ms_parse_tokens.c	/^static t_gc *gcl;$/;"	v	file:
gcl	test_src/token/test_ms_tokenize.c	/^static t_gc *gcl;$/;"	v	file:
get_left_child	src/ast/print_ast.c	/^t_ast_node	*get_left_child(t_ast_node *node)$/;"	f
get_node_label	src/ast/print_ast.c	/^char	*get_node_label(t_ast_node *node)$/;"	f
get_operator_map	src/token/tokenize_operator.c	/^static const t_operator_map	*get_operator_map(void)$/;"	f	file:
get_right_child	src/ast/print_ast.c	/^t_ast_node	*get_right_child(t_ast_node *node)$/;"	f
handle_braced_variable	src/exec/ms_expand_var.c	/^static char	*handle_braced_variable(const char *token, size_t *i, t_env_data *env_data, char *result)$/;"	f	file:
handle_dollar_at_end	src/exec/ms_expand_var.c	/^static char	*handle_dollar_at_end(char *result)$/;"	f	file:
handle_exit_status	src/exec/ms_expand_var.c	/^static char	*handle_exit_status(char *result, t_env_data *env_data)$/;"	f	file:
handle_in_quote	src/token/tokenize_word.c	/^static void	handle_in_quote(t_copy_state *state)$/;"	f	file:
handle_in_quote	src/token/tokenize_word_helper.c	/^static void	handle_in_quote(t_token_state *state)$/;"	f	file:
handle_not_in_quote	src/token/tokenize_word.c	/^static void	handle_not_in_quote(t_copy_state *state)$/;"	f	file:
handle_not_in_quote	src/token/tokenize_word_helper.c	/^static void	handle_not_in_quote(t_token_state *state)$/;"	f	file:
handle_regular_characters	src/exec/ms_expand_var.c	/^static char	*handle_regular_characters(const char *token, size_t *i, char *result)$/;"	f	file:
handle_variable	src/exec/ms_expand_var.c	/^static char	*handle_variable(const char *token, size_t *i, t_env_data *env_data, char *result)$/;"	f	file:
help_word	src/token/tokenize_word.c	/^t_token	*help_word(char *value, t_gc *gcl, bool is_expand)$/;"	f
heredoc	include/ast.h	/^	t_heredoc_node		heredoc;$/;"	m	union:u_node_data
i	include/syntax.h	/^	int		i;$/;"	m	struct:s_syntax
i	include/tokenize.h	/^	int						i;$/;"	m	struct:s_op_state
i	include/tokenize.h	/^	int			i;$/;"	m	struct:s_copy_state
i	include/tokenize.h	/^	int			i;$/;"	m	struct:s_token_state
in_quote	include/tokenize.h	/^	bool		in_quote;$/;"	m	struct:s_copy_state
in_quote	include/tokenize.h	/^	bool		in_quote;$/;"	m	struct:s_token_state
in_subshell	src/ast/parse_command.c	/^static t_ast_node	*in_subshell(t_token **current_token, t_gc *gcl)$/;"	f	file:
init_context	main.c	/^static void	init_context(t_exec_context *data, t_shell *shell)$/;"	f	file:
init_context	src/exec/ms_execute_pipeline.c	/^static void	init_context(t_pipe_context *pipe_context, t_exec_context *context)$/;"	f	file:
init_op_state	src/token/tokenize_operator.c	/^static void	init_op_state(const char **input, t_op_state *op_state)$/;"	f	file:
initialize_token_state	src/token/tokenize_word_helper.c	/^static void	initialize_token_state(t_token_state *state, const char *current,$/;"	f	file:
is_command_op	src/ast/utils.c	/^bool	is_command_op(t_token *current_token)$/;"	f
is_expand	include/tokenize.h	/^	bool		is_expand;$/;"	m	struct:s_token_state
is_frame	src/token/utils.c	/^bool	is_frame(char c)$/;"	f
is_last	include/exec.h	/^	bool		is_last;$/;"	m	struct:s_process
is_logical_op	src/ast/utils.c	/^bool	is_logical_op(t_token *current_token)$/;"	f
is_operator	src/token/utils.c	/^bool	is_operator(char c)$/;"	f
is_pipe_op	src/ast/utils.c	/^bool	is_pipe_op(t_token *current_token)$/;"	f
is_quote	src/token/utils.c	/^bool	is_quote(char c)$/;"	f
is_redir_op	src/ast/utils2.c	/^bool	is_redir_op(t_token *current_token)$/;"	f
is_sbs_start	src/ast/utils2.c	/^bool	is_sbs_start(t_token *current_token)$/;"	f
is_sbs_stop	src/ast/utils2.c	/^bool	is_sbs_stop(t_token *current_token)$/;"	f
is_subprocess	include/exec.h	/^	bool		is_subprocess;$/;"	m	struct:s_exec_context
is_whitespace	src/token/utils.c	/^bool	is_whitespace(char c)$/;"	f
j	include/tokenize.h	/^	int			j;$/;"	m	struct:s_copy_state
last_pid	include/exec.h	/^	pid_t			last_pid;$/;"	m	struct:s_pipe_context
last_status	include/exec.h	/^	int				last_status;$/;"	m	struct:s_pipe_context
left	include/ast.h	/^	struct s_ast_node	*left;$/;"	m	struct:s_logic_node	typeref:struct:s_logic_node::s_ast_node
left	include/ast.h	/^	struct s_ast_node	*left;$/;"	m	struct:s_pipe_node	typeref:struct:s_pipe_node::s_ast_node
len	include/tokenize.h	/^	int			len;$/;"	m	struct:s_token_state
len_end	include/syntax.h	/^	int		len_end;$/;"	m	struct:s_syntax
logic	include/ast.h	/^	t_logic_node		logic;$/;"	m	union:u_node_data
lst_tokens_suite	test_src/token/test_lst_tokens.c	/^Suite *lst_tokens_suite(void)$/;"	f
main	main.c	/^int	main(int argc, char **argv, char **envp)$/;"	f
main	test_src/ast/test_ms_parse_tokens.c	/^int main(void)$/;"	f
main	test_src/env_lst_utils/test_ms_env_add_back.c	/^int main(void) {$/;"	f
main	test_src/env_lst_utils/test_ms_env_create_node.c	/^int main(void)$/;"	f
main	test_src/init_shell/test_ms_get_user_input.c	/^int	main(void)$/;"	f
main	test_src/init_shell/test_ms_init_env.c	/^int main(void)$/;"	f
main	test_src/init_shell/test_ms_init_shell.c	/^int main(void)$/;"	f
main	test_src/signal/test_ms_init_std_signal.c	/^int main(void)$/;"	f
main	test_src/signal/test_ms_stop_std_signal.c	/^int main(void)$/;"	f
main	test_src/syntax_error/test_ms_syntax_error.c	/^int main(void)$/;"	f
main	test_src/token/test_lst_tokens.c	/^int main(void)$/;"	f
main	test_src/token/test_ms_tokenize.c	/^int main(void)$/;"	f
main	test_src/token/test_tokenize_frame.c	/^int main(void)$/;"	f
main	test_src/token/test_tokenize_operator.c	/^int main(void)$/;"	f
main	test_src/token/test_tokenize_word.c	/^int main(void)$/;"	f
minishell_suite	test_src/env_lst_utils/test_ms_env_add_back.c	/^Suite *minishell_suite(void) {$/;"	f
minishell_suite	test_src/init_shell/test_ms_get_user_input.c	/^Suite	*minishell_suite(void)$/;"	f
mock_add_history	test_src/init_shell/test_ms_get_user_input.c	/^void	mock_add_history(const char *line)$/;"	f
mock_readline	test_src/init_shell/test_ms_get_user_input.c	/^char	*mock_readline(const char *prompt)$/;"	f
ms_check_alloc	src/exec/ms_concat_path.c	/^static void	ms_check_alloc(void *ptr, t_gc *gcl)$/;"	f	file:
ms_child_process	src/exec/ms_execute_external.c	/^static void	ms_child_process(t_cmd_node *cmd_node, t_exec_context *context,$/;"	f	file:
ms_concat_path	src/exec/ms_concat_path.c	/^char	*ms_concat_path(const char *path, const char *command, t_gc *gcl)$/;"	f
ms_echo	src/builtin/ms_echo.c	/^int	ms_echo(t_cmd_node *cmd_node)$/;"	f
ms_env_add_back	src/env_lst_utils/ms_env_add_back.c	/^void	ms_env_add_back(t_env **env, t_env *new_node)$/;"	f
ms_env_create_node	src/env_lst_utils/ms_env_create_node.c	/^t_env	*ms_env_create_node(t_shell *shell, const char *env_line)$/;"	f
ms_execute_ast	src/exec/ms_execute_ast.c	/^int	ms_execute_ast(t_ast_node *node, t_exec_context *context)$/;"	f
ms_execute_command	src/exec/ms_execute_command.c	/^int	ms_execute_command(t_cmd_node *cmd_node, t_exec_context *context, t_gc *gcl)$/;"	f
ms_execute_external	src/exec/ms_execute_external.c	/^int	ms_execute_external(t_cmd_node *cmd_node, t_exec_context *context, t_gc *gcl)$/;"	f
ms_execute_logical	src/exec/ms_execute_logical.c	/^int	ms_execute_logical(t_logic_node *logic_node, t_exec_context *context,$/;"	f
ms_execute_pipeline	src/exec/ms_execute_pipeline.c	/^int	ms_execute_pipeline(t_pipe_node *pipe_node, t_exec_context *context)$/;"	f
ms_execute_subshell	src/exec/ms_execute_subshell.c	/^int	ms_execute_subshell(t_subshell_node *subshell_node, t_exec_context *context)$/;"	f
ms_exit	src/builtin/ms_exit.c	/^int	ms_exit(t_cmd_node *cmd_node, t_exec_context *context)$/;"	f
ms_exit_code	src/builtin/ms_exit.c	/^void	ms_exit_code(t_cmd_node *cmd_node, t_exec_context *context)$/;"	f
ms_expand_variables	src/exec/ms_expand_var.c	/^char	*ms_expand_variables(const char *token, t_env_data *env_data)$/;"	f
ms_expand_wild	src/exec/ms_expand_wild.c	/^char	**ms_expand_wild(const char *pattern, t_gc *gcl)$/;"	f
ms_export	src/builtin/ms_export.c	/^int	ms_export(t_cmd_node *cmd_node, t_exec_context *context)$/;"	f
ms_get_user_input	src/init_shell/ms_get_user_input.c	/^void	ms_get_user_input(t_shell *shell)$/;"	f
ms_getenv	src/exec/ms_getenv.c	/^char	*ms_getenv(const char *name, t_env_data *env_data)$/;"	f
ms_handle_error	src/exec/ms_handle_error.c	/^int	ms_handle_error(const char *msg, t_gc *gcl)$/;"	f
ms_handle_redirections	src/exec/ms_execute_redirections.c	/^int		ms_handle_redirections(t_ast_node *node, t_exec_context *context)$/;"	f
ms_heredoc_child	src/exec/ms_heredoc_mode.c	/^static void	ms_heredoc_child(const char *delimiter, int write_fd)$/;"	f	file:
ms_heredoc_mode	src/exec/ms_heredoc_mode.c	/^int	ms_heredoc_mode(const char *delimiter, t_exec_context *context, t_gc *gcl)$/;"	f
ms_heredoc_parent	src/exec/ms_heredoc_mode.c	/^static int	ms_heredoc_parent(pid_t pid, int read_fd, t_exec_context *context,$/;"	f	file:
ms_init_env	src/init_shell/ms_init_env.c	/^t_env_data	*ms_init_env(char **envp, t_shell *shell)$/;"	f
ms_init_env_suite	test_src/init_shell/test_ms_init_env.c	/^Suite *ms_init_env_suite(void)$/;"	f
ms_init_shell	src/init_shell/ms_init_shell.c	/^t_shell	ms_init_shell(int argc, char **argv, char **envp)$/;"	f
ms_init_shell_suite	test_src/init_shell/test_ms_init_shell.c	/^Suite *ms_init_shell_suite(void)$/;"	f
ms_init_std_signal	src/signal/ms_init_std_signal.c	/^void	ms_init_std_signal(void)$/;"	f
ms_init_std_signal_suite	test_src/signal/test_ms_init_std_signal.c	/^Suite *ms_init_std_signal_suite(void)$/;"	f
ms_open_file	src/exec/ms_execute_redirections.c	/^static int	ms_open_file(const char *filename, int flags, mode_t mode)$/;"	f	file:
ms_parent_process	src/exec/ms_execute_external.c	/^static void	ms_parent_process(pid_t pid, t_exec_context *context)$/;"	f	file:
ms_parse_cmd_path	src/exec/ms_parse_cmd_path.c	/^char	*ms_parse_cmd_path(const char *command, t_shell *shell)$/;"	f
ms_parse_tokens	src/ast/ms_parse_tokens.c	/^t_ast_node	*ms_parse_tokens(t_token *tokens, t_gc *gcl)$/;"	f
ms_pattern_match	src/exec/ms_expand_wild.c	/^bool	ms_pattern_match(const char *pattern, const char *filename)$/;"	f
ms_pwd	src/builtin/ms_pwd.c	/^int	ms_pwd(void)$/;"	f
ms_redirect_input	src/exec/ms_execute_external.c	/^void	ms_redirect_input(int in_fd)$/;"	f
ms_redirect_output	src/exec/ms_execute_external.c	/^void	ms_redirect_output(int out_fd)$/;"	f
ms_stop_std_signal	src/signal/ms_stop_std_signal.c	/^void	ms_stop_std_signal(void)$/;"	f
ms_stop_std_signal_suite	test_src/signal/test_ms_stop_std_signal.c	/^Suite *ms_stop_std_signal_suite(void)$/;"	f
ms_syntax_error	src/syntax_error/ms_syntax_error.c	/^int	ms_syntax_error(const char *input)$/;"	f
ms_syntax_error_suite	test_src/syntax_error/test_ms_syntax_error.c	/^static Suite    *ms_syntax_error_suite(void)$/;"	f	file:
ms_tokenize	src/token/ms_tokenize.c	/^t_token	*ms_tokenize(const char *command_line, t_gc *gcl)$/;"	f
next	include/minishell.h	/^	struct s_env	*next;$/;"	m	struct:s_env	typeref:struct:s_env::s_env
next	include/tokenize.h	/^	struct s_token	*next;$/;"	m	struct:s_token	typeref:struct:s_token::s_token
num_processes	include/exec.h	/^	int			num_processes;$/;"	m	struct:s_pipeline
o_and	include/syntax.h	/^	int		o_and;$/;"	m	struct:s_syntax
o_or	include/syntax.h	/^	int		o_or;$/;"	m	struct:s_syntax
o_pipe	include/syntax.h	/^	int		o_pipe;$/;"	m	struct:s_syntax
op_len	include/tokenize.h	/^	int						op_len;$/;"	m	struct:s_op_state
op_map	include/tokenize.h	/^	const t_operator_map	*op_map;$/;"	m	struct:s_op_state
op_str	include/tokenize.h	/^	char					*op_str;$/;"	m	struct:s_op_state
op_str	include/tokenize.h	/^	const char		*op_str;$/;"	m	struct:s_operator_map
operator_gestion	src/syntax_error/operator_gestion.c	/^int	operator_gestion(t_syntax **syntax)$/;"	f
p_char	include/syntax.h	/^	int		p_char;$/;"	m	struct:s_syntax
p_trigger	include/syntax.h	/^	int		p_trigger;$/;"	m	struct:s_syntax
parent_process	src/exec/ms_execute_pipeline.c	/^static void	parent_process(t_pipe_context *pipe_context,$/;"	f	file:
parenthesis_gestion	src/syntax_error/parenthesis_gestion.c	/^int	parenthesis_gestion(t_syntax **syntax)$/;"	f
parse_command	src/ast/parse_command.c	/^t_ast_node	*parse_command(t_token **current_token, t_gc *gcl)$/;"	f
parse_logical	src/ast/parse_logical.c	/^t_ast_node	*parse_logical(t_token **current_token, t_gc *gcl)$/;"	f
parse_pipeline	src/ast/parse_pipeline.c	/^t_ast_node	*parse_pipeline(t_token **current_token, t_gc *gcl)$/;"	f
parse_redirection	src/ast/parse_redirection.c	/^t_ast_node	*parse_redirection(t_token **current_token, t_ast_node *child,$/;"	f
parse_subshell	src/ast/parse_subshell.c	/^t_ast_node	*parse_subshell(t_token **current_token, t_gc *gcl)$/;"	f
path	include/minishell.h	/^	char	*path;$/;"	m	struct:s_env_data
pid	include/exec.h	/^	pid_t		pid;$/;"	m	struct:s_process
pipe	include/ast.h	/^	t_pipe_node			pipe;$/;"	m	union:u_node_data
pipefd	include/exec.h	/^	int				pipefd[2];$/;"	m	struct:s_pipe_context
print_ast	src/ast/print_ast.c	/^void	print_ast(t_ast_node *node, int depth, char *prefix, int is_left)$/;"	f
print_branch	src/ast/utils2.c	/^void	print_branch(int depth, int is_left)$/;"	f
print_node_content	src/ast/print_ast.c	/^void	print_node_content(t_ast_node *node)$/;"	f
print_token	src/token/lst_tokens.c	/^void	print_token(t_token *head)$/;"	f
processes	include/exec.h	/^	t_process	*processes;$/;"	m	struct:s_pipeline
quote	include/tokenize.h	/^	char		quote;$/;"	m	struct:s_copy_state
quote	include/tokenize.h	/^	char		quote;$/;"	m	struct:s_token_state
quote_gestion	src/syntax_error/quote_gestion.c	/^int	quote_gestion(t_syntax **syntax)$/;"	f
r_app	include/syntax.h	/^	int		r_app;$/;"	m	struct:s_syntax
r_here	include/syntax.h	/^	int		r_here;$/;"	m	struct:s_syntax
r_in	include/syntax.h	/^	int		r_in;$/;"	m	struct:s_syntax
r_out	include/syntax.h	/^	int		r_out;$/;"	m	struct:s_syntax
redir_gestion	src/syntax_error/redir_gestion.c	/^int	redir_gestion(t_syntax **syntax)$/;"	f
redirect	include/ast.h	/^	t_redirect_node		redirect;$/;"	m	union:u_node_data
right	include/ast.h	/^	struct s_ast_node	*right;$/;"	m	struct:s_logic_node	typeref:struct:s_logic_node::s_ast_node
right	include/ast.h	/^	struct s_ast_node	*right;$/;"	m	struct:s_pipe_node	typeref:struct:s_pipe_node::s_ast_node
run	main.c	/^static void	run(t_shell *shell, t_token *tokens, t_ast_node *root)$/;"	f	file:
s_ast_node	include/ast.h	/^typedef struct s_ast_node$/;"	s
s_cmd_node	include/ast.h	/^typedef struct s_cmd_node$/;"	s
s_copy_state	include/tokenize.h	/^typedef struct s_copy_state$/;"	s
s_env	include/minishell.h	/^typedef struct s_env$/;"	s
s_env_data	include/minishell.h	/^typedef struct s_env_data$/;"	s
s_exec_context	include/exec.h	/^typedef struct s_exec_context$/;"	s
s_export_utils	src/builtin/ms_export.c	/^typedef struct s_export_utils$/;"	s	file:
s_heredoc_node	include/ast.h	/^typedef struct s_heredoc_node$/;"	s
s_logic_node	include/ast.h	/^typedef struct s_logic_node$/;"	s
s_op_state	include/tokenize.h	/^typedef struct s_op_state$/;"	s
s_operator_map	include/tokenize.h	/^typedef struct s_operator_map$/;"	s
s_pipe_context	include/exec.h	/^typedef struct s_pipe_context$/;"	s
s_pipe_node	include/ast.h	/^typedef struct s_pipe_node$/;"	s
s_pipeline	include/exec.h	/^typedef struct s_pipeline$/;"	s
s_process	include/exec.h	/^typedef struct s_process$/;"	s
s_redirect_node	include/ast.h	/^typedef struct s_redirect_node$/;"	s
s_shell	include/minishell.h	/^typedef struct s_shell$/;"	s
s_subshell_node	include/ast.h	/^typedef struct s_subshell_node$/;"	s
s_syntax	include/syntax.h	/^typedef struct s_syntax$/;"	s
s_testresult	test_src/syntax_error/test_ms_syntax_error.c	/^typedef struct s_testresult$/;"	s	file:
s_token	include/tokenize.h	/^typedef struct s_token$/;"	s
s_token_state	include/tokenize.h	/^typedef struct s_token_state$/;"	s
setup	test_src/ast/test_ms_parse_tokens.c	/^void setup(void)$/;"	f
setup	test_src/syntax_error/test_ms_syntax_error.c	/^static void setup(void)$/;"	f	file:
setup	test_src/token/test_ms_tokenize.c	/^void    setup(void)$/;"	f
shell	include/exec.h	/^	t_shell		*shell;$/;"	m	struct:s_exec_context
shell	include/minishell.h	/^	char	*shell;$/;"	m	struct:s_env_data
shell	src/builtin/ms_export.c	/^	t_shell	*shell;$/;"	m	struct:s_export_utils	file:
shell_lvl	include/minishell.h	/^	int		shell_lvl;$/;"	m	struct:s_env_data
skip_whitespace	src/token/utils.c	/^void	skip_whitespace(const char **input)$/;"	f
sq_trigger	include/syntax.h	/^	int		sq_trigger;$/;"	m	struct:s_syntax
st_and_verif	src/syntax_error/operator_gestion.c	/^static int	st_and_verif(t_syntax **syntax)$/;"	f	file:
st_close_parenthesis	src/syntax_error/parenthesis_gestion.c	/^static int	st_close_parenthesis(t_syntax **syntax)$/;"	f	file:
st_create_envp	src/init_shell/ms_init_env.c	/^static char	**st_create_envp(t_shell *shell, t_env_data *env_data)$/;"	f	file:
st_get_path	src/init_shell/ms_init_env.c	/^static char	*st_get_path(t_env_data *env_data)$/;"	f	file:
st_get_shell	src/init_shell/ms_init_env.c	/^static char	*st_get_shell(t_env_data *env_data)$/;"	f	file:
st_get_term	src/init_shell/ms_init_env.c	/^static char	*st_get_term(t_env_data *env_data)$/;"	f	file:
st_in_par	src/syntax_error/parenthesis_gestion.c	/^static int	st_in_par(t_syntax **syntax)$/;"	f	file:
st_in_parenthesis	src/syntax_error/parenthesis_gestion.c	/^static int	st_in_parenthesis(t_syntax **syntax)$/;"	f	file:
st_init_utils	src/builtin/ms_export.c	/^static void	st_init_utils(t_export_utils *utils, t_shell *shell)$/;"	f	file:
st_is_and	src/syntax_error/check_reinit.c	/^static int	st_is_and(t_syntax **syntax)$/;"	f	file:
st_line_check	src/syntax_error/ms_syntax_error.c	/^static int	st_line_check(t_syntax *synt)$/;"	f	file:
st_open_parenthesis	src/syntax_error/parenthesis_gestion.c	/^static int	st_open_parenthesis(t_syntax **syntax)$/;"	f	file:
st_or_verif	src/syntax_error/operator_gestion.c	/^static int	st_or_verif(t_syntax **syntax)$/;"	f	file:
st_pipe_verif	src/syntax_error/operator_gestion.c	/^static int	st_pipe_verif(t_syntax **syntax)$/;"	f	file:
st_print_error_operator_redir	src/syntax_error/check_error.c	/^static void	st_print_error_operator_redir(int error)$/;"	f	file:
st_redir_in	src/syntax_error/redir_gestion.c	/^static int	st_redir_in(t_syntax **syntax)$/;"	f	file:
st_redir_out	src/syntax_error/redir_gestion.c	/^static int	st_redir_out(t_syntax **syntax)$/;"	f	file:
st_reinit_operator	src/syntax_error/check_reinit.c	/^static int	st_reinit_operator(char c)$/;"	f	file:
st_reinit_redir	src/syntax_error/check_reinit.c	/^static int	st_reinit_redir(char c)$/;"	f	file:
st_sigint_std_handler	src/signal/ms_init_std_signal.c	/^static void	st_sigint_std_handler(int sig)$/;"	f	file:
start_quote	include/tokenize.h	/^	char		start_quote;$/;"	m	struct:s_token_state
stderr_fd	include/exec.h	/^	int			stderr_fd;$/;"	m	struct:s_exec_context
stderr_output	test_src/syntax_error/test_ms_syntax_error.c	/^    char stderr_output[STDERR_BUFFER_SIZE];$/;"	m	struct:s_testresult	file:
stdin_fd	include/exec.h	/^	int			stdin_fd;$/;"	m	struct:s_exec_context
stdout_fd	include/exec.h	/^	int			stdout_fd;$/;"	m	struct:s_exec_context
stop	include/tokenize.h	/^	bool		stop;$/;"	m	struct:s_copy_state
stop	include/tokenize.h	/^	bool		stop;$/;"	m	struct:s_token_state
subshell	include/ast.h	/^	t_subshell_node		subshell;$/;"	m	union:u_node_data
t_ast_node	include/ast.h	/^}				t_ast_node;$/;"	t	typeref:struct:s_ast_node
t_cmd_node	include/ast.h	/^}				t_cmd_node;$/;"	t	typeref:struct:s_cmd_node
t_copy_state	include/tokenize.h	/^}				t_copy_state;$/;"	t	typeref:struct:s_copy_state
t_env	include/minishell.h	/^}				t_env;$/;"	t	typeref:struct:s_env
t_env_data	include/minishell.h	/^}				t_env_data;$/;"	t	typeref:struct:s_env_data
t_exec_context	include/exec.h	/^}				t_exec_context;$/;"	t	typeref:struct:s_exec_context
t_export_utils	src/builtin/ms_export.c	/^}				t_export_utils;$/;"	t	typeref:struct:s_export_utils	file:
t_heredoc_node	include/ast.h	/^}				t_heredoc_node;$/;"	t	typeref:struct:s_heredoc_node
t_logic_node	include/ast.h	/^}				t_logic_node;$/;"	t	typeref:struct:s_logic_node
t_node_data	include/ast.h	/^}						t_node_data;$/;"	t	typeref:union:u_node_data
t_node_type	include/ast.h	/^}			t_node_type;$/;"	t	typeref:enum:e_node_type
t_op_state	include/tokenize.h	/^}				t_op_state;$/;"	t	typeref:struct:s_op_state
t_operator_map	include/tokenize.h	/^}					t_operator_map;$/;"	t	typeref:struct:s_operator_map
t_pipe_context	include/exec.h	/^}				t_pipe_context;$/;"	t	typeref:struct:s_pipe_context
t_pipe_node	include/ast.h	/^}				t_pipe_node;$/;"	t	typeref:struct:s_pipe_node
t_pipeline	include/exec.h	/^}				t_pipeline;$/;"	t	typeref:struct:s_pipeline
t_process	include/exec.h	/^}				t_process;$/;"	t	typeref:struct:s_process
t_redirect_node	include/ast.h	/^}				t_redirect_node;$/;"	t	typeref:struct:s_redirect_node
t_shell	include/minishell.h	/^}				t_shell;$/;"	t	typeref:struct:s_shell
t_subshell_node	include/ast.h	/^}				t_subshell_node;$/;"	t	typeref:struct:s_subshell_node
t_syntax	include/syntax.h	/^}	t_syntax;$/;"	t	typeref:struct:s_syntax
t_testresult	test_src/syntax_error/test_ms_syntax_error.c	/^} t_testresult;$/;"	t	typeref:struct:s_testresult	file:
t_token	include/tokenize.h	/^}			t_token;$/;"	t	typeref:struct:s_token
t_token_state	include/tokenize.h	/^}				t_token_state;$/;"	t	typeref:struct:s_token_state
t_token_type	include/tokenize.h	/^}			t_token_type;$/;"	t	typeref:enum:e_token_type
teardown	test_src/ast/test_ms_parse_tokens.c	/^void teardown(void)$/;"	f
teardown	test_src/syntax_error/test_ms_syntax_error.c	/^static void teardown(void)$/;"	f	file:
teardown	test_src/token/test_ms_tokenize.c	/^void    teardown(void)$/;"	f
term	include/minishell.h	/^	char	*term;$/;"	m	struct:s_env_data
test_ms_init_shell_exit	test_src/init_shell/test_ms_init_shell.c	/^int test_ms_init_shell_exit(int argc, char **argv, char **envp)$/;"	f
test_signal_handling	test_src/signal/test_ms_init_std_signal.c	/^int test_signal_handling(void (*init_signal_func)(void), int signal_to_send)$/;"	f
test_signal_handling	test_src/signal/test_ms_stop_std_signal.c	/^int test_signal_handling(void (*init_signal_func)(void), int signal_to_send)$/;"	f
token	include/tokenize.h	/^	char			*token;$/;"	m	struct:s_token
token_len	src/token/tokenize_word_helper.c	/^int	token_len(const char *current, char start_quote, bool *is_expand)$/;"	f
tokenize_frame	src/token/tokenize_frame.c	/^t_token	*tokenize_frame(const char **input, t_gc *gcl)$/;"	f
tokenize_operator	src/token/tokenize_operator.c	/^t_token	*tokenize_operator(const char **input, t_gc *gcl)$/;"	f
tokenize_suite	test_src/token/test_ms_tokenize.c	/^Suite *tokenize_suite(void)$/;"	f
tokenize_word	src/token/tokenize_word.c	/^t_token	*tokenize_word(const char **input, t_gc *gcl)$/;"	f
tokenize_word_suite	test_src/token/test_tokenize_frame.c	/^Suite *tokenize_word_suite(void)$/;"	f
tokenize_word_suite	test_src/token/test_tokenize_operator.c	/^Suite *tokenize_word_suite(void)$/;"	f
tokenize_word_suite	test_src/token/test_tokenize_word.c	/^Suite *tokenize_word_suite(void)$/;"	f
type	include/ast.h	/^	t_node_type			type;$/;"	m	struct:s_redirect_node
type	include/ast.h	/^	t_node_type	type;$/;"	m	struct:s_ast_node
type	include/tokenize.h	/^	t_token_type			type;$/;"	m	struct:s_op_state
type	include/tokenize.h	/^	t_token_type	type;$/;"	m	struct:s_operator_map
type	include/tokenize.h	/^	t_token_type	type;$/;"	m	struct:s_token
u_node_data	include/ast.h	/^typedef union u_node_data$/;"	u
user_input	include/minishell.h	/^	char		*user_input;$/;"	m	struct:s_shell
value	include/minishell.h	/^	char			*value;$/;"	m	struct:s_env
value	include/tokenize.h	/^	char					*value;$/;"	m	struct:s_op_state
value	include/tokenize.h	/^	char		*value;$/;"	m	struct:s_copy_state
value	src/builtin/ms_export.c	/^	char	*value;$/;"	m	struct:s_export_utils	file:
var	include/minishell.h	/^	char			*var;$/;"	m	struct:s_env
var	src/builtin/ms_export.c	/^	char	*var;$/;"	m	struct:s_export_utils	file:
