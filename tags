!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
BLUE	Makefile	/^BLUE    = \\033[34m$/;"	m
BOLD	Makefile	/^BOLD    = \\033[1m$/;"	m
CC	Makefile	/^CC = 		cc$/;"	m
CC	Makefile	/^default: CC = cc$/;"	m
CC	Makefile	/^san: CC = clang$/;"	m
CC	Makefile	/^val: CC = cc$/;"	m
CFLAGS	Makefile	/^CFLAGS = 	-Wall -Wextra -Werror$/;"	m
DEPFLAGS	Makefile	/^DEPFLAGS =  -MMD -MP$/;"	m
DEPS	Makefile	/^DEPS = 		$(OBJ:.o=.d)$/;"	m
DirectoryOfThisScript	ycm_extra_conf.py	/^def DirectoryOfThisScript():$/;"	f
FlagsForFile	ycm_extra_conf.py	/^def FlagsForFile(filename):$/;"	f
GREEN	Makefile	/^GREEN   = \\033[32m$/;"	m
HELG	Makefile	/^HELG =      valgrind --tool=helgrind --history-level=full \\$/;"	m
INCLUDES	Makefile	/^INCLUDES = -I.\/include -I.\/lib\/libgc\/include -I.\/lib\/libft\/include$/;"	m
LDFLAGS	Makefile	/^LDFLAGS = -lreadline -L.\/lib\/libgc -lgc -L.\/lib\/libft -lft$/;"	m
MINISHELL_H	include/minishell.h	14;"	d
MakeRelativePathsAbsolute	ycm_extra_conf.py	/^def MakeRelativePathsAbsolute(flags, working_directory):$/;"	f
NAME	Makefile	/^NAME = Minishell$/;"	m
OBJ	Makefile	/^OBJ = 		$(SRC:$(SRC_DIR)\/%.c=$(OBJ_DIR)\/%.o)$/;"	m
OBJ_DIR	Makefile	/^OBJ_DIR = 	obj$/;"	m
RED	Makefile	/^RED     = \\033[31m$/;"	m
RESET	Makefile	/^RESET   = \\033[0m$/;"	m
RUN_MINISHELL_COMMAND_H	test_minishell/run_minishell_command.h	14;"	d
SANITIZE	Makefile	/^SANITIZE = 	-g3 -fPIC -fsanitize=thread$/;"	m
SCRIPT_URL	Makefile	/^SCRIPT_URL = https:\/\/github.com\/jeromeDev94\/make_interface.git$/;"	m
SRC	Makefile	/^SRC = \\$/;"	m
SRC_DIR	Makefile	/^SRC_DIR = 	src$/;"	m
START_TEST	test_minishell/test_main.c	/^START_TEST(test_echo_simple)$/;"	f
START_TEST	test_src/env_lst_utils/test_ms_env_add_back.c	/^START_TEST(test_add_null_node) {$/;"	f
START_TEST	test_src/env_lst_utils/test_ms_env_add_back.c	/^START_TEST(test_add_to_empty_list) {$/;"	f
START_TEST	test_src/env_lst_utils/test_ms_env_add_back.c	/^START_TEST(test_add_to_non_empty_list) {$/;"	f
START_TEST	test_src/env_lst_utils/test_ms_env_add_back.c	/^START_TEST(test_add_with_null_env) {$/;"	f
START_TEST	test_src/env_lst_utils/test_ms_env_create_node.c	/^START_TEST(test_create_node_basic)$/;"	f
START_TEST	test_src/env_lst_utils/test_ms_env_create_node.c	/^START_TEST(test_create_node_no_equals)$/;"	f
START_TEST	test_src/env_lst_utils/test_ms_env_create_node.c	/^START_TEST(test_create_node_no_value)$/;"	f
START_TEST	test_src/init_shell/test_ms_get_user_input.c	/^START_TEST(test_ms_get_user_input_empty)$/;"	f
START_TEST	test_src/init_shell/test_ms_get_user_input.c	/^START_TEST(test_ms_get_user_input_normal)$/;"	f
START_TEST	test_src/init_shell/test_ms_get_user_input.c	/^START_TEST(test_ms_get_user_input_special_chars)$/;"	f
START_TEST	test_src/init_shell/test_ms_init_env.c	/^START_TEST(test_ms_init_env_with_envp)$/;"	f
START_TEST	test_src/init_shell/test_ms_init_env.c	/^START_TEST(test_ms_init_env_without_envp)$/;"	f
START_TEST	test_src/init_shell/test_ms_init_shell.c	/^START_TEST(test_ms_init_shell_no_args)$/;"	f
START_TEST	test_src/init_shell/test_ms_init_shell.c	/^START_TEST(test_ms_init_shell_with_empty_envp)$/;"	f
START_TEST	test_src/init_shell/test_ms_init_shell.c	/^START_TEST(test_ms_init_shell_with_envp)$/;"	f
START_TEST	test_src/init_shell/test_ms_init_shell.c	/^START_TEST(test_ms_init_shell_with_invalid_argc)$/;"	f
START_TEST	test_src/signal/test_ms_init_std_signal.c	/^START_TEST(test_ms_init_std_signal_sigint)$/;"	f
START_TEST	test_src/signal/test_ms_init_std_signal.c	/^START_TEST(test_ms_init_std_signal_sigquit)$/;"	f
START_TEST	test_src/signal/test_ms_stop_std_signal.c	/^START_TEST(test_ms_stop_std_signal_sigint)$/;"	f
START_TEST	test_src/signal/test_ms_stop_std_signal.c	/^START_TEST(test_ms_stop_std_signal_sigquit)$/;"	f
TOTAL_STEPS	Makefile	/^TOTAL_STEPS := $(words $(OBJ))$/;"	m
VALG	Makefile	/^VALG =		valgrind --leak-check=full --show-leak-kinds=all \\$/;"	m
VERBOSE	Makefile	/^VERBOSE ?= @$/;"	m
VERBOSE	Makefile	/^classic: VERBOSE =$/;"	m
VFLAGS	Makefile	/^VFLAGS = 	-g3 -fPIC $/;"	m
YELLOW	Makefile	/^YELLOW  = \\033[33m$/;"	m
compilation_database_folder	ycm_extra_conf.py	/^compilation_database_folder = ''$/;"	v
create_env_node	test_src/env_lst_utils/test_ms_env_add_back.c	/^t_env *create_env_node(const char *var, const char *value) {$/;"	f
env	include/minishell.h	/^	t_env	*env;$/;"	m	struct:s_env_data
env_data	include/minishell.h	/^	t_env_data	*env_data;$/;"	m	struct:s_shell
env_exist	include/minishell.h	/^	bool	env_exist;$/;"	m	struct:s_env_data
env_suite	test_src/env_lst_utils/test_ms_env_create_node.c	/^Suite *env_suite(void)$/;"	f
error_code	include/minishell.h	/^	int			error_code;$/;"	m	struct:s_shell
flags	ycm_extra_conf.py	/^flags = [$/;"	v
free_env_list	test_src/env_lst_utils/test_ms_env_add_back.c	/^void free_env_list(t_env *env) {$/;"	f
g_signal	src/global.c	/^int	g_signal;$/;"	v
gcl	include/minishell.h	/^	t_gc		*gcl;$/;"	m	struct:s_shell
main	main.c	/^int	main(int argc, char **argv, char **envp)$/;"	f
main	test_minishell/test_main.c	/^int main(void)$/;"	f
main	test_src/env_lst_utils/test_ms_env_add_back.c	/^int main(void) {$/;"	f
main	test_src/env_lst_utils/test_ms_env_create_node.c	/^int main(void)$/;"	f
main	test_src/init_shell/test_ms_get_user_input.c	/^int	main(void)$/;"	f
main	test_src/init_shell/test_ms_init_env.c	/^int main(void)$/;"	f
main	test_src/init_shell/test_ms_init_shell.c	/^int main(void)$/;"	f
main	test_src/signal/test_ms_init_std_signal.c	/^int main(void)$/;"	f
main	test_src/signal/test_ms_stop_std_signal.c	/^int main(void)$/;"	f
minishell_suite	test_minishell/test_main.c	/^Suite *minishell_suite(void)$/;"	f
minishell_suite	test_src/env_lst_utils/test_ms_env_add_back.c	/^Suite *minishell_suite(void) {$/;"	f
minishell_suite	test_src/init_shell/test_ms_get_user_input.c	/^Suite	*minishell_suite(void)$/;"	f
mock_add_history	test_src/init_shell/test_ms_get_user_input.c	/^void	mock_add_history(const char *line)$/;"	f
mock_readline	test_src/init_shell/test_ms_get_user_input.c	/^char	*mock_readline(const char *prompt)$/;"	f
ms_env_add_back	src/env_lst_utils/ms_env_add_back.c	/^void	ms_env_add_back(t_env **env, t_env *new_node)$/;"	f
ms_env_create_node	src/env_lst_utils/ms_env_create_node.c	/^t_env	*ms_env_create_node(t_shell *shell, const char *env_line)$/;"	f
ms_get_user_input	src/init_shell/ms_get_user_input.c	/^void	ms_get_user_input(t_shell *shell)$/;"	f
ms_init_env	src/init_shell/ms_init_env.c	/^t_env_data	*ms_init_env(char **envp, t_shell *shell)$/;"	f
ms_init_env_suite	test_src/init_shell/test_ms_init_env.c	/^Suite *ms_init_env_suite(void)$/;"	f
ms_init_shell	src/init_shell/ms_init_shell.c	/^t_shell	ms_init_shell(int argc, char **argv, char **envp)$/;"	f
ms_init_shell_suite	test_src/init_shell/test_ms_init_shell.c	/^Suite *ms_init_shell_suite(void)$/;"	f
ms_init_std_signal	src/signal/ms_init_std_signal.c	/^void	ms_init_std_signal(void)$/;"	f
ms_init_std_signal_suite	test_src/signal/test_ms_init_std_signal.c	/^Suite *ms_init_std_signal_suite(void)$/;"	f
ms_stop_std_signal	src/signal/ms_stop_std_signal.c	/^void	ms_stop_std_signal(void)$/;"	f
ms_stop_std_signal_suite	test_src/signal/test_ms_stop_std_signal.c	/^Suite *ms_stop_std_signal_suite(void)$/;"	f
next	include/minishell.h	/^	struct s_env	*next;$/;"	m	struct:s_env	typeref:struct:s_env::s_env
path	include/minishell.h	/^	char	*path;$/;"	m	struct:s_env_data
read_from_fd	test_minishell/run_minishell_command.c	/^static char	*read_from_fd(int fd)$/;"	f	file:
run_minishell_command	test_minishell/run_minishell_command.c	/^int	run_minishell_command(const char *exec_path, const char *command, char **output)$/;"	f
s_env	include/minishell.h	/^typedef struct s_env$/;"	s
s_env_data	include/minishell.h	/^typedef struct s_env_data$/;"	s
s_shell	include/minishell.h	/^typedef struct s_shell$/;"	s
shell	include/minishell.h	/^	char	*shell;$/;"	m	struct:s_env_data
shell_lvl	include/minishell.h	/^	int		shell_lvl;$/;"	m	struct:s_env_data
st_create_envp	src/init_shell/ms_init_env.c	/^static char	**st_create_envp(t_shell *shell, t_env_data *env_data)$/;"	f	file:
st_get_path	src/init_shell/ms_init_env.c	/^static char	*st_get_path(t_env_data *env_data)$/;"	f	file:
st_get_shell	src/init_shell/ms_init_env.c	/^static char	*st_get_shell(t_env_data *env_data)$/;"	f	file:
st_get_term	src/init_shell/ms_init_env.c	/^static char	*st_get_term(t_env_data *env_data)$/;"	f	file:
st_sigint_std_handler	src/signal/ms_init_std_signal.c	/^static void	st_sigint_std_handler(int sig)$/;"	f	file:
t_env	include/minishell.h	/^}				t_env;$/;"	t	typeref:struct:s_env
t_env_data	include/minishell.h	/^}				t_env_data;$/;"	t	typeref:struct:s_env_data
t_shell	include/minishell.h	/^}				t_shell;$/;"	t	typeref:struct:s_shell
term	include/minishell.h	/^	char	*term;$/;"	m	struct:s_env_data
test_ms_init_shell_exit	test_src/init_shell/test_ms_init_shell.c	/^int test_ms_init_shell_exit(int argc, char **argv, char **envp)$/;"	f
test_signal_handling	test_src/signal/test_ms_init_std_signal.c	/^int test_signal_handling(void (*init_signal_func)(void), int signal_to_send)$/;"	f
test_signal_handling	test_src/signal/test_ms_stop_std_signal.c	/^int test_signal_handling(void (*init_signal_func)(void), int signal_to_send)$/;"	f
user_input	include/minishell.h	/^	char		*user_input;$/;"	m	struct:s_shell
value	include/minishell.h	/^	char			*value;$/;"	m	struct:s_env
var	include/minishell.h	/^	char			*var;$/;"	m	struct:s_env
